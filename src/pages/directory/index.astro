---
import Layout from '../../layouts/Layout.astro';
import SearchBar from '../../components/SearchBar.astro';
import TagFilter from '../../components/TagFilter.astro';
import DirectoryCard from '../../components/DirectoryCard.astro';
import { supabase } from '../../utils/supabase';

const { data: directoryItems = [] } = await supabase
  .from('directory_items')
  .select('*')
  .order('created_at', { ascending: false });

const allTags = [...new Set(directoryItems.flatMap(item => item.tags))].sort();
---

<Layout title="Directory">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <h1 class="text-4xl font-bold mb-12">Directory</h1>
    
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Left Sidebar -->
      <div class="lg:col-span-1 space-y-8">
        <SearchBar value="" onChange="updateDirectory" />
        <TagFilter
          tags={allTags}
          selectedTags={[]}
          onChange="updateDirectory"
        />
      </div>

      <!-- Directory Items Grid -->
      <div class="lg:col-span-3">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="directoryGrid">
          {directoryItems.map((item) => (
            <DirectoryCard
              title={item.title}
              description={item.description}
              tags={item.tags}
              id={item.id}
            />
          ))}
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  let items = [];
  let searchTerm = '';
  let selectedTags = [];

  async function fetchDirectoryItems() {
    const response = await fetch('/api/directory');
    items = await response.json();
    filterItems();
  }

  function filterItems() {
    const filteredItems = items.filter(item => {
      const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          item.description.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesTags = selectedTags.length === 0 || 
                         selectedTags.every(tag => item.tags.includes(tag));
      return matchesSearch && matchesTags;
    });

    updateGrid(filteredItems);
  }

  function updateGrid(filteredItems) {
    const grid = document.getElementById('directoryGrid');
    if (!grid) return;
    
    grid.innerHTML = filteredItems.map(item => `
      <article class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="p-6">
          <h3 class="text-xl font-semibold mb-2">
            <a href="/directory/${item.id}" class="hover:text-primary">
              ${item.title}
            </a>
          </h3>
          <p class="text-gray-600 mb-4">${item.description}</p>
          <div class="flex flex-wrap gap-2">
            ${item.tags.map(tag => `
              <span class="px-2 py-1 bg-gray-100 text-gray-600 text-sm rounded-full">
                ${tag}
              </span>
            `).join('')}
          </div>
        </div>
      </article>
    `).join('');
  }

  document.addEventListener('updateDirectory', (e) => {
    if (typeof e.detail === 'string') {
      searchTerm = e.detail;
    } else if (Array.isArray(e.detail)) {
      selectedTags = e.detail;
    }
    filterItems();
  });

  fetchDirectoryItems();
</script>